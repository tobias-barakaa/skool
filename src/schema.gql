# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AcademicStatus {
  ACTIVE
  DROPPED_OUT
  GRADUATED
  ON_LEAVE
  SUSPENDED
  TRANSFERRED
}

enum AssessmentType {
  ASSIGNMENT
  CAT
  EXAM
  QUIZ
  TEST
}

type Attendance {
  attendanceId: ID!
  class: Class
  classId: String
  date: DateTime!
  markedBy: Teacher!
  remarks: String
  status: AttendanceStatus!
  student: Student!
  studentId: String!
  subject: Subject
  subjectId: String
  timeIn: DateTime
  timeOut: DateTime
}

enum AttendanceStatus {
  ABSENT
  EXCUSED
  LATE
  PRESENT
}

type Branch {
  address: String!
  branchCode: String!
  branchId: ID!
  branchName: String!
  classes: [Class!]!
  isActive: Boolean!
  school: School!
  schoolId: String!
  students: [Student!]!
  teachers: [Teacher!]!
  userBranches: [UserBranch!]
}

type Class {
  academicYear: String!
  assignments: [String!]
  assistantTeacher: [Teacher!]
  assistantTeacherId: String
  attendance: [Attendance!]!
  branch: [Branch!]!
  branchId: String!
  breakTimes: [String!]
  building: String
  classCode: String!
  classEvents: [String!]
  classId: ID!
  classMonitor: [Student!]
  classMonitorId: String
  className: String!
  classTeacher: [Teacher!]!
  classTeacherId: String!
  classType: ClassType!
  classroom: String
  createdAt: DateTime!
  createdBy: String!
  currentStudents: Float!
  exams: [String!]
  floor: Float
  grade: String!
  grades: [Grade!]!
  isActive: Boolean!
  isPromoted: Boolean!
  maxStudents: Float!
  school: [School!]!
  schoolDayEnd: String!
  schoolDayStart: String!
  schoolId: String!
  section: String
  specialNeeds: Boolean!
  stream: String!
  students: [Student!]!
  subjects: [String!]
  teachers: [String!]
  term: String!
  timetable: [String!]
  updatedAt: DateTime!
}

enum ClassType {
  BOARDING
  REGULAR
  SPECIAL
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  schoolName: String!
  userRole: String!
}

type CreateUserResponse {
  school: School!
  subdomainUrl: String!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Gender {
  FEMALE
  MALE
  OTHER
}

type Grade {
  academicYear: String!
  assessmentName: String!
  assessmentType: AssessmentType!
  class: Class!
  classId: String!
  dateRecorded: DateTime!
  gradeId: ID!
  isPublished: Boolean!
  letterGrade: String
  marksObtained: Float!
  percentage: Float!
  points: Float
  recordedBy: String!
  student: Student!
  studentId: String!
  subject: Subject!
  subjectId: String!
  teacher: Teacher!
  term: String!
  totalMarks: Float!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): CreateUserResponse!
}

type Parent {
  address: String
  children: [Student!]!
  emergencyContact: String
  firstName: String!
  lastName: String!
  occupation: String
  parentId: ID!
  phoneNumber: String!
  school: School!
  schoolId: String!
  user: User!
}

type Query {
  users: [User!]!
}

type School {
  branches: [Branch!]
  classes: [Class!]!
  createdAt: DateTime!
  isActive: Boolean!
  manager: SchoolManager
  schoolId: ID!
  schoolName: String!
  schoolType: String!
  students: [Student!]!
  subdomain: String!
  subject: Subject!
  updatedAt: DateTime!
  users: [User!]
}

type SchoolManager {
  createdAt: DateTime!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String
  position: String
  school: School
  title: String
  updatedAt: DateTime!
  user: User!
}

type Student {
  academicStatus: AcademicStatus!
  address: String!
  admissionDate: DateTime!
  admissionNumber: String!
  allergies: [String!]
  attendance: [Attendance!]!
  bloodGroup: String
  branch: Branch!
  branchId: String!
  class: Class!
  classId: String
  createdAt: DateTime!
  createdBy: String!
  currentClass: Class
  currentGrade: String!
  dateOfBirth: DateTime!
  disciplinaryRecords: [String!]
  emergencyContact: [String!]!
  feeCategory: String
  feePayments: [String!]
  feesOwed: Float!
  firstName: String!
  gender: Gender!
  gpa: Float
  grades: [Grade!]!
  graduationDate: DateTime
  guardianId: String
  hasLeft: Boolean!
  invoices: [String!]
  isActive: Boolean!
  lastName: String!
  leftDate: DateTime
  leftReason: String
  medicalConditions: [String!]
  medicalRecords: [String!]
  middleName: String
  monitorOf: [Class!]!
  nationality: String!
  overallGrade: String
  parent: Parent!
  phoneNumber: String
  primaryParentId: String!
  rank: Float
  religion: String
  scholarshipType: String
  school: School!
  schoolId: String!
  secondaryParent: Parent
  secondaryParentId: String
  stream: String
  studentId: ID!
  studentNumber: String!
  subjects: [Subject!]
  totalFeesPaid: Float!
  updatedAt: DateTime!
  user: User
}

type Subject {
  attendance: [Attendance!]!
  category: SubjectCategory!
  classes: [String!]
  createdAt: DateTime!
  createdBy: String!
  creditHours: Float!
  curriculum: [String!]!
  department: String!
  examSchedules: [String!]
  gradeLevel: [String!]!
  grades: [Grade!]
  isActive: Boolean!
  isCompulsory: Boolean!
  isOffered: Boolean!
  learningOutcomes: [String!]!
  materials: [String!]!
  passingMarks: Float!
  practicalHours: Float
  prerequisiteSubjects: [String!]!
  school: School!
  schoolId: String!
  shortName: String!
  students: [String!]
  subjectCode: String!
  subjectId: ID!
  subjectName: String!
  subjectType: SubjectType!
  syllabus: String
  teachers: [String!]!
  textbooks: [String!]!
  timetableSlots: [String!]
  totalMarks: Float!
  updatedAt: DateTime!
}

enum SubjectCategory {
  CORE
  ELECTIVE
  EXTRA_CURRICULAR
  OPTIONAL
}

enum SubjectType {
  ACADEMIC
  MIXED
  PRACTICAL
  THEORY
}

type Teacher {
  assistantClasses: [Class!]!
  attendance: [Attendance!]!
  branches: [Branch!]!
  classes: [String!]!
  dateOfBirth: DateTime
  department: String
  employeeId: String!
  firstName: String!
  grades: [Grade!]!
  hireDate: DateTime!
  isActive: Boolean!
  lastName: String!
  phoneNumber: String
  primaryClasses: [Class!]!
  qualifications: [String!]!
  salary: Float
  school: School!
  schoolId: String!
  specialization: [String!]!
  subjects: [String!]!
  teacherId: ID!
  user: User!
}

type User {
  branch: Branch
  createdAt: DateTime!
  email: String!
  id: ID!
  managerProfile: SchoolManager
  name: String!
  parentProfile: Parent
  password: String!
  school: School!
  teacherProfile: Teacher
  updatedAt: DateTime!
  userBranches: [UserBranch!]
  userRole: String!
}

type UserBranch {
  branch: Branch!
  branchId: String!
  canAccess: Boolean!
  user: User!
  userId: String!
}