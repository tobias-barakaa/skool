# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptInvitationInput {
  password: String!
  token: String!
}

type AcceptInvitationResponse {
  message: String!
  teacher: TeacherOutput
  tokens: TokensOutput!
  user: User!
}

enum AssessmentType {
  ASSIGNMENT
  CAT
  EXAM
  QUIZ
  TEST
}

type Attendance {
  attendanceId: ID!
  class: Class
  classId: String
  date: DateTime!
  remarks: String
  status: AttendanceStatus!
  studentId: String!
  subjectId: String
  timeIn: DateTime
  timeOut: DateTime
}

enum AttendanceStatus {
  ABSENT
  EXCUSED
  LATE
  PRESENT
}

type AuthResponse {
  allMemberships: [UserTenantMembership!]
  membership: UserTenantMembership
  subdomainUrl: String!
  tenant: Tenant!
  tokens: TokenResponse!
  user: User!
}

input ChangePasswordInput {
  confirmPassword: String!
  currentPassword: String!
  newPassword: String!
}

type Class {
  academicYear: String!
  assignments: [String!]
  assistantTeacherId: String
  attendance: [Attendance!]!
  branchId: String!
  breakTimes: [String!]
  building: String
  classCode: String!
  classEvents: [String!]
  classId: ID!
  classMonitorId: String
  className: String!
  classTeacherId: String!
  classType: ClassType!
  classroom: String
  createdAt: DateTime!
  createdBy: String!
  currentStudents: Float!
  exams: [String!]
  floor: Float
  grade: String!
  grades: [Grade!]!
  isActive: Boolean!
  isPromoted: Boolean!
  maxStudents: Float!
  school: [School!]!
  schoolDayEnd: String!
  schoolDayStart: String!
  schoolId: String!
  section: String
  specialNeeds: Boolean!
  stream: String!
  subjects: [String!]
  teachers: [String!]
  term: String!
  timetable: [String!]
  updatedAt: DateTime!
}

enum ClassType {
  BOARDING
  REGULAR
  SPECIAL
}

input CreateStreamInput {
  capacity: Int
  description: String
  gradeLevelId: String!
  isActive: Boolean = true
  name: String!
}

input CreateStudentInput {
  admission_number: String!
  email: String!
  gender: String!
  grade: String!
  name: String!
  phone: String!
}

type CreateStudentResponse {
  generatedPassword: String!
  student: Student!
  user: User!
}

input CreateTeacherInvitationDto {
  address: String
  dateOfBirth: DateTime
  department: String!
  email: String!
  employeeId: String
  firstName: String!
  fullName: String!
  gender: String!
  lastName: String!
  phoneNumber: String!
  qualifications: String
  role: String!
  subject: String
}

type CreateUserResponse {
  school: School!
  subdomainUrl: String!
  tenant: Tenant!
  tokens: TokensOutput!
  user: User!
}

type Curriculum {
  code: String!
  curriculumSubjects: [CurriculumSubject]!
  display_name: String!
  gradeLevels: [GradeLevel]!
  id: ID!
  name: String!
  schoolLevels: [SchoolLevel]!
  schoolType: SchoolType
}

type CurriculumSubject {
  availableGrades: [GradeLevel!]
  creditHours: Float
  curriculum: Curriculum!
  displayOrder: Float
  id: ID!
  isActive: Boolean!
  isCompulsory: Boolean
  passingMarks: Float
  schoolLevel: SchoolLevel
  subject: Subject!
  subjectType: SubjectType!
  totalMarks: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input ForgotPasswordInput {
  email: String!
}

type Grade {
  academicYear: String!
  assessmentName: String!
  assessmentType: AssessmentType!
  class: Class!
  classId: String!
  dateRecorded: DateTime!
  gradeId: ID!
  isPublished: Boolean!
  letterGrade: String
  marksObtained: Float!
  percentage: Float!
  points: Float
  recordedBy: String!
  studentId: String!
  subjectId: String!
  term: String!
  totalMarks: Float!
}

type GradeLevel {
  code: String!
  id: ID!
  name: String!
  order: Float!
}

type GradeLevelResponse {
  age: String
  code: String
  id: ID!
  name: String!
  order: Float
  streams: [Stream!]
}

type InvitationInfo {
  email: String!
  role: MembershipRole!
  tenantName: String!
}

type InviteTeacherResponse {
  createdAt: DateTime!
  email: String!
  fullName: String!
  status: String!
}

type Level {
  description: String
  gradeLevels: [GradeLevel!]
  grades: [Grade!]!
  id: ID!
  name: String!
  schoolType: SchoolTypeConfig!
}

enum MembershipRole {
  SCHOOL_ADMIN
  SCHOOL_MANAGER
  STAFF
  STUDENT
  SUPER_ADMIN
  TEACHER
  TREASURER
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  PENDING
  SUSPENDED
}

type Mutation {
  acceptTeacherInvitation(acceptInvitationInput: AcceptInvitationInput!): AcceptInvitationResponse!
  changePassword(changePasswordInput: ChangePasswordInput!): PasswordResetResponse!
  configureSchoolLevelsByNames(levelNames: [String!]!): SchoolConfigurationResponse!
  createMultipleStudents(studentsData: [CreateStudentInput!]!): [CreateStudentResponse!]!
  createStream(input: CreateStreamInput!): StreamType!
  createStudent(createStudentInput: CreateStudentInput!): CreateStudentResponse!
  createUser(signupInput: SignupInput!): CreateUserResponse!
  deleteStream(id: ID!): Boolean!
  forgotPassword(forgotPasswordInput: ForgotPasswordInput!): PasswordResetResponse!
  inviteTeacher(createTeacherDto: CreateTeacherInvitationDto!, tenantId: String!): InviteTeacherResponse!
  resetPassword(resetPasswordInput: ResetPasswordInput!): PasswordResetResponse!
  revokeInvitation(invitationId: String!): String!
  signIn(signInInput: SignInInput!): AuthResponse!
  updateStream(input: UpdateStreamInput!): StreamType!
}

type PasswordResetResponse {
  message: String!
}

type Query {
  activeStreams: [StreamType!]!
  debugHost: String!
  getAvailableLevelNames: [String!]!
  getPendingInvitations(tenantId: String!): String!
  getSchoolConfiguration: SchoolConfigurationResponse
  getTeachersByTenant(tenantId: String!): [TeacherDto!]!
  stream(id: ID!): StreamType!
  streams: [StreamType!]!
  streamsByGradeLevel(gradeLevelId: ID!): [StreamType!]!
  students: [StudentWithTenant!]!
  users: [User!]!
}

input ResetPasswordInput {
  confirmPassword: String!
  newPassword: String!
  token: String!
}

type School {
  classes: [Class!]!
  createdAt: DateTime!
  isActive: Boolean!
  schoolId: ID!
  schoolName: String!
  schoolType: SchoolType!
  subdomain: String!
  updatedAt: DateTime!
}

type SchoolConfigurationResponse {
  createdAt: DateTime!
  id: ID!
  schoolType: SchoolTypeResponse
  selectedLevels: [SelectedLevelResponse!]!
  tenant: TenantResponse!
  updatedAt: DateTime!
}

type SchoolLevel {
  curriculum: Curriculum
  curriculumSubjects: [CurriculumSubject!]
  gradeLevels: [GradeLevel!]
  id: ID!
  name: String!
  schoolType: SchoolType!
}

type SchoolType {
  code: String
  description: String
  icon: String
  id: ID!
  levels: [Level!]
  name: String!
  priority: Float
  schoolLevels: [SchoolLevel!]
  schools: [School!]
}

type SchoolTypeConfig {
  description: String!
  icon: String!
  levels: [SchoolTypeLevel!]!
  menuItems: [String!]!
  name: String!
  priority: Float!
  type: String!
}

type SchoolTypeGrade {
  age: Float!
  name: String!
}

type SchoolTypeLevel {
  description: String!
  grades: [SchoolTypeGrade!]!
  name: String!
}

type SchoolTypeResponse {
  displayName: String!
  id: ID!
  name: String!
}

type SelectedLevelResponse {
  ageRange: String
  code: String
  description: String
  displayName: String
  gradeLevels: [GradeLevelResponse!]
  id: ID!
  name: String!
  subjects: [SubjectResponse!]
}

input SignInInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  name: String!
  password: String!
  schoolName: String!
  schoolUrl: String
}

type Stream {
  capacity: Int
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean
  name: String!
  tenant: Tenant!
  updatedAt: DateTime!
}

type StreamType {
  capacity: Int
  createdAt: DateTime!
  description: String
  gradeLevel: GradeLevel!
  id: ID!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime!
}

type Student {
  admission_number: String!
  createdAt: DateTime!
  feesOwed: Float!
  gender: String!
  grade: String!
  id: ID!
  isActive: Boolean!
  phone: String!
  totalFeesPaid: Float!
  updatedAt: DateTime!
  user: User!
  user_id: ID!
}

type StudentWithTenant {
  admission_number: String!
  createdAt: DateTime!
  feesOwed: Float!
  gender: String!
  grade: String!
  id: String!
  isActive: Boolean!
  phone: String!
  streamId: String
  tenantId: String!
  totalFeesPaid: Float!
  updatedAt: DateTime!
  user: User!
  user_id: String!
}

type Subject {
  code: String!
  curriculumSubjects: [CurriculumSubject]
  description: String
  id: ID!
  name: String!
  shortName: String
}

type SubjectResponse {
  category: String
  code: String!
  creditHours: Float
  curriculum: String
  department: String
  id: ID!
  isCompulsory: Boolean
  name: String!
  passingMarks: Float
  shortName: String
  subjectType: String
  totalMarks: Float
}

"""The type of the subject"""
enum SubjectType {
  ACADEMIC
  ARTS
  COMPULSORY
  CORE
  ELECTIVE
  MIXED
  OPTIONAL
  PRACTICAL
  SPORTS
  THEORY
  VOCATIONAL
}

type TeacherDto {
  address: String
  dateOfBirth: DateTime
  department: String!
  email: String!
  employeeId: String
  firstName: String!
  fullName: String!
  gender: String!
  hasCompletedProfile: Boolean!
  id: ID!
  isActive: Boolean!
  lastName: String!
  phoneNumber: String!
  subject: String
  userId: String
}

type TeacherOutput {
  id: String!
  name: String!
}

type Tenant {
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean!
  memberships: [UserTenantMembership!]!
  name: String!
  subdomain: String!
  updatedAt: DateTime!
}

type TenantResponse {
  id: ID!
  schoolName: String!
  subdomain: String!
}

type TokenPair {
  accessToken: String!
  refreshToken: String!
}

type TokenResponse {
  accessToken: String!
  refreshToken: String!
}

type TokensOutput {
  accessToken: String!
  refreshToken: String!
}

input UpdateStreamInput {
  capacity: Float
  description: String
  gradeLevelId: ID
  id: ID!
  isActive: Boolean
  name: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  isGlobalAdmin: Boolean!
  memberships: [UserTenantMembership!]!
  name: String!
  password: String!
  schoolUrl: String!
  updatedAt: DateTime!
}

type UserTenantMembership {
  createdAt: DateTime!
  id: ID!
  joinedAt: DateTime
  permissions: [String!]
  role: MembershipRole!
  status: MembershipStatus!
  tenant: Tenant!
  updatedAt: DateTime!
  user: User!
}