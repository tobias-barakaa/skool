# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AcademicSummary {
  averageScore: Float!
  currentGrade: String
  currentStream: String
  feesOwed: Float!
  schoolType: String
  totalAssessments: Float!
  totalFeesPaid: Float!
}

type AcademicYear {
  createdAt: DateTime!
  endDate: DateTime!
  id: ID!
  isActive: Boolean!
  isCurrent: Boolean!
  name: String!
  startDate: DateTime!
  tenantId: String!
  terms: [Term!]
  updatedAt: DateTime!
}

input AcceptInvitationInput {
  password: String!
  token: String!
}

type AcceptInvitationResponse {
  invitation: UserInvitation!
  message: String!
  role: String!
  teacher: TeacherOutput
  tokens: TokensOutput!
  user: User!
}

type AcceptParentInvitationResponse {
  invitation: UserInvitation!
  message: String!
  parent: Parent!
  role: MembershipRole!
  tokens: TokensOutput!
  user: User!
}

input AcceptStaffInvitationInput {
  password: String!
  token: String!
}

type AcceptStaffInvitationResponse {
  invitation: UserInvitation!
  message: String!
  role: String!
  staff: StaffInfo
  tokens: TokensOutput!
  user: UserInfo!
}

"""The status of assessment"""
enum AssesStatus {
  COMPLETED
  PENDING
  UPCOMING
}

"""The type of assessment"""
enum AssessType {
  CA
  EXAM
}

type Assessment {
  academicYear: String
  createdAt: DateTime!
  cutoff: Float
  date: DateTime
  description: String
  id: ID!
  maxScore: Float
  status: AssesStatus!
  tenant: Tenant!
  tenantGradeLevel: TenantGradeLevel!
  tenantSubject: TenantSubject!
  tenantSubjectId: String!
  term: Float!
  title: String!
  type: AssessType!
  updatedAt: DateTime!
}

input AssessmentFilterInput {
  academicYear: String
  tenantGradeLevelId: String
  tenantSubjectId: String
  term: Float
  type: AssessType
}

type AssessmentMark {
  assessment: Assessment!
  createdAt: DateTime!
  id: ID!
  score: Float!
  student: Student!
  updatedAt: DateTime!
}

type AssessmentOutput {
  academicYear: String
  createdAt: DateTime!
  cutoff: Float
  description: String
  id: ID!
  maxScore: Float
  status: AssesStatus!
  tenantGradeLevel: TenantGradeLevelOutput
  tenantId: String!
  tenantSubject: TenantSubjectOutput
  term: Float!
  title: String!
  type: AssessType!
  updatedAt: DateTime!
}

enum AssessmentType {
  ASSIGNMENT
  CAT
  EXAM
  QUIZ
  TEST
}

input AssignGradeLevelClassTeacherInput {
  gradeLevelId: ID!
  teacherId: ID!
}

input AssignScholarshipInput {
  academicYear: String!
  scholarshipId: String!
  studentId: String!
}

input AssignStreamClassTeacherInput {
  streamId: ID!
  teacherId: ID!
}

input AssignTransportInput {
  """Pickup point location (optional)"""
  pickupPoint: String

  """Transport route ID to assign student to"""
  routeId: ID!

  """Student ID to assign to transport route"""
  studentId: ID!
}

type Assignment {
  createdAt: DateTime!
  description: String!
  dueDate: DateTime!
  id: ID!
  resourceUrl: String
  status: AssignmentStatus!
  subject: AssignmentSubject!
  submission: AssignmentSubmission
  teacher: AssignmentTeacher!
  title: String!
  totalMarks: Int!
  updatedAt: DateTime!
}

"""Status of the student assignment"""
enum AssignmentStatus {
  GRADED
  OVERDUE
  PENDING
  SUBMITTED
}

type AssignmentSubject {
  id: ID!
  name: String!
}

type AssignmentSubmission {
  comments: String
  feedback: String
  fileUrl: String
  grade: Float
  gradedAt: DateTime
  id: ID!
  submissionText: String
  submittedAt: DateTime!
}

type AssignmentTeacher {
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
}

type AssignmentsResponse {
  assignments: [Assignment!]!
  currentPage: Int!
  total: Int!
  totalPages: Int!
}

type Attendance {
  createdAt: DateTime!
  date: String!
  gradeId: String!
  id: ID!
  status: AttendanceStatus!
  student: Student!
  studentId: String!
  teacher: Teacher!
  teacherId: String!
  tenantId: String!
}

input AttendanceInput {
  status: AttendanceStatus!
  studentId: String!
}

enum AttendanceStatus {
  ABSENT
  LATE
  PRESENT
  SUSPENDED
}

type AuthResponse {
  allMemberships: [UserTenantMembership!]
  membership: UserTenantMembership
  subdomainUrl: String!
  tenant: Tenant!
  tokens: TokenResponse!
  user: User!
}

input BroadcastMessageInput {
  imageUrl: String
  message: String!
  recipientType: String!
  subject: String
}

"""
Input for bulk toggling fee items by fee structure item and grade levels
"""
input BulkToggleByFeeStructureItemInput {
  """The fee structure item ID to toggle for students"""
  feeStructureItemId: ID!

  """Array of grade level IDs to apply the toggle to"""
  gradeLevelIds: [ID!]!

  """Whether to activate or deactivate the fee items"""
  isActive: Boolean!
}

"""Input for bulk toggling student fee items"""
input BulkToggleStudentFeeItemsInput {
  """Whether to activate or deactivate the fee items"""
  isActive: Boolean!

  """Array of student fee item IDs to toggle"""
  studentFeeItemIds: [ID!]!
}

input BulkTransportAssignmentInput {
  """Common pickup point for all students (optional)"""
  pickupPoint: String

  """Transport route ID to assign students to"""
  routeId: ID!

  """
  Array of student IDs to assign. If empty, assigns all students in tenant
  """
  studentIds: [ID!]
}

input ChangePasswordInput {
  confirmPassword: String!
  currentPassword: String!
  newPassword: String!
}

type ChatMessage {
  chatRoom: ChatRoom!
  chatRoomId: String!
  createdAt: DateTime!
  id: ID!
  imageUrl: String
  isRead: Boolean!
  message: String!
  senderId: String!
  senderType: String!
  subject: String
}

type ChatRoom {
  createdAt: DateTime!
  id: ID!
  messages: [ChatMessage!]
  name: String!
  participantIds: [String!]!
  type: String!
  updatedAt: DateTime!
}

type ClassTeacherAssignment {
  active: Boolean!
  createdAt: DateTime!
  endDate: DateTime
  gradeLevel: TenantGradeLevel
  id: ID!
  startDate: DateTime!
  stream: TenantStream
  teacher: Teacher!
  tenant: Tenant!
  updatedAt: DateTime!
}

type CombinedSearchResult {
  students: [Student!]!
  teachers: [Teacher!]!
  totalCount: Float!
}

input CreateAcademicYearInput {
  endDate: String!
  name: String!
  startDate: String!
}

input CreateAssessmentInput {
  academicYear: String!
  cutoff: Float
  description: String
  maxScore: Float
  status: AssesStatus
  tenantGradeLevelId: String!
  tenantSubjectId: String!
  term: Float!
  title: String
  type: AssessType!
}

input CreateAssignmentSubmissionInput {
  assignmentId: ID!
  comments: String
  fileUrl: String
  submissionText: String
}

input CreateAttendanceInput {
  attendanceRecords: [AttendanceInput!]!
  date: String!
  gradeId: String!
}

input CreateCustomSubjectInput {
  category: String
  code: String!
  creditHours: Float
  curriculumId: String!
  department: String
  isCompulsory: Boolean! = true
  name: String!
  passingMarks: Float
  shortName: String
  subjectType: String! = "core"
  totalMarks: Float
}

"""Input for creating a new fee assignment"""
input CreateFeeAssignmentInput {
  """Optional description or notes about this assignment"""
  description: String

  """The ID of the fee structure to assign"""
  feeStructureId: String!

  """Array of tenant grade level IDs (not grade level IDs)"""
  tenantGradeLevelIds: [String!]!
}

"""Input type for creating a new fee bucket"""
input CreateFeeBucketInput {
  """Description of the fee bucket"""
  description: String

  """The name of the fee bucket"""
  name: String!
}

"""Input type for creating a new fee structure"""
input CreateFeeStructureInput {
  """The ID of the academic year"""
  academicYearId: String!

  """Array of grade level IDs this fee structure applies to"""
  gradeLevelIds: [String!]

  """The name of the fee structure"""
  name: String!

  """The IDs of the terms"""
  termIds: [String!]!
}

"""Input for creating a new fee structure item"""
input CreateFeeStructureItemInput {
  """The amount for this fee item"""
  amount: Float!

  """The ID of the fee bucket"""
  feeBucketId: ID!

  """The ID of the fee structure"""
  feeStructureId: ID!

  """Indicates if this fee item is mandatory"""
  isMandatory: Boolean! = true
}

input CreateHostelAssignmentInput {
  bedNumber: String
  hostelId: ID!
  roomNumber: String
  studentId: ID!
}

input CreateHostelInput {
  capacity: Int!
  feeAmount: Float!
  name: String!
}

"""Input type for creating a new invoice"""
input CreateInvoiceInput {
  """The ID of the academic year"""
  academicYearId: ID!

  """Additional notes or description"""
  description: String

  """The due date for payment"""
  dueDate: String!

  """The ID of the student"""
  studentId: ID!

  """The ID of the term"""
  termId: ID!

  """The total amount of the invoice"""
  totalAmount: Float!
}

input CreateOptionInput {
  imageUrl: String
  isCorrect: Boolean!
  order: Int!
  text: String!
}

input CreateParentInvitationDto {
  admissionNumber: String
  email: String!
  linkingMethod: ParentLinkingMethod!
  name: String!
  phone: String
  studentFullName: String
  studentGrade: String
  studentName: String
  studentPhone: String
}

"""Input type for creating a new payment"""
input CreatePaymentInput {
  """The amount paid"""
  amount: Float!

  """The ID of the invoice this payment is for"""
  invoiceId: ID

  """Additional notes about the payment"""
  notes: String

  """The date when the payment was made"""
  paymentDate: String!

  """The method used for payment"""
  paymentMethod: PaymentMethod!

  """The ID of the student making the payment"""
  studentId: ID!

  """Transaction ID from payment provider"""
  transactionId: String
}

input CreateQuestionInput {
  aiPrompt: String
  imageUrls: [String!]
  isAIGenerated: Boolean!
  marks: Int!
  options: [CreateOptionInput!]
  order: Int!
  text: String!
  type: QuestionType!
}

input CreateReferenceMaterialInput {
  fileSize: Float
  fileType: String!
  fileUrl: String!
}

input CreateScholarshipInput {
  amount: Float!
  description: String
  name: String!
  type: String
}

input CreateStaffInvitationDto {
  address: String
  bankAccount: String
  bankName: String
  dateOfBirth: String
  dateOfJoining: String
  department: String
  email: String!
  emergencyContact: String
  emergencyContactPhone: String
  employeeId: String
  firstName: String!
  fullName: String!
  gender: String!
  jobDescription: String
  lastName: String!
  nationalId: String
  phoneNumber: String
  qualifications: String
  role: String!
  roleType: String!
  salary: Float
  supervisor: String
  workExperience: String
}

input CreateStreamInput {
  capacity: Int
  description: String
  gradeLevelId: String!
  isActive: Boolean = true
  name: String!
}

input CreateStudentInput {
  admission_number: String!
  email: String!
  gender: String!
  name: String!
  phone: String!
  schoolType: String
  tenantGradeLevelId: String!
}

type CreateStudentResponse {
  generatedPassword: String!
  student: Student!
  user: User!
}

input CreateTeacherInvitationDto {
  address: String
  classTeacherTenantGradeLevelId: ID
  classTeacherTenantStreamId: ID
  dateOfBirth: String
  department: String!
  email: String!
  employeeId: String
  firstName: String!
  fullName: String!
  gender: String!
  lastName: String!
  phoneNumber: String!
  qualifications: String
  role: String!
  tenantGradeLevelIds: [ID!]
  tenantSubjectIds: [ID!]
}

input CreateTenantStreamInput {
  capacity: Int
  description: String
  name: String!
  tenantGradeLevelId: String!
}

"""Input data for creating a new term"""
input CreateTermInput {
  """The ID of the academic year to which this term belongs"""
  academicYearId: ID!

  """The end date of the term (YYYY-MM-DD). Must be after start date."""
  endDate: String!

  """The name of the term"""
  name: String!

  """The start date of the term (YYYY-MM-DD)"""
  startDate: String!
}

input CreateTestInput {
  date: DateTime!
  duration: Int!
  endTime: String
  instructions: String
  questions: [CreateQuestionInput!]
  referenceMaterials: [CreateReferenceMaterialInput!]
  resourceUrl: String
  startTime: String!
  tenantGradeLevelIds: [ID!]!
  tenantSubjectId: ID!
  title: String!
  totalMarks: Int!
}

input CreateTransportRouteInput {
  """Custom label e.g. 'Per Semester' or 'Every 2 Weeks'"""
  billingCycleLabel: String
  fee: Float!
  name: String!
}

type CreateUserResponse {
  membership: UserTenantMembership
  school: School!
  subdomainUrl: String!
  tenant: Tenant!
  tokens: TokensOutput!
  user: User!
}

type Curriculum {
  code: String!
  curriculumSubjects: [CurriculumSubject]!
  display_name: String!
  gradeLevels: [GradeLevel]!
  id: ID!
  name: String!
  schoolLevels: [SchoolLevel]!
  schoolType: SchoolType
}

type CurriculumSubject {
  availableGrades: [GradeLevel!]
  creditHours: Float
  curriculum: Curriculum!
  displayOrder: Float
  id: ID!
  isActive: Boolean!
  isCompulsory: Boolean
  passingMarks: Float
  schoolLevel: SchoolLevel
  subject: Subject!
  subjectType: SubjectType!
  totalMarks: Float
}

type CustomSubject {
  category: String
  code: String
  creditHours: Float
  department: String
  id: ID!
  isActive: Boolean!
  isCompulsory: Boolean
  name: String!
  passingMarks: Float
  shortName: String
  subjectType: SubjectTypeEnum
  totalMarks: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EnterStudentMarksInput {
  marks: [StudentMarkInput!]!
  studentId: ID!
}

"""
Represents bulk assignment of fee structure to students in specific grade levels
"""
type FeeAssignment {
  """The ID of the user who created this assignment"""
  assignedBy: ID!
  assignedByUser: User!

  """The date and time when the fee assignment was created"""
  createdAt: DateTime!

  """Optional description or notes about this assignment"""
  description: String

  """The fee structure being assigned"""
  feeStructure: FeeStructure!

  """The ID of the fee structure being assigned"""
  feeStructureId: ID!

  """Indicates if the fee assignment has any student assignments"""
  hasItems: Boolean!

  """The unique identifier of the fee assignment"""
  id: ID!

  """Indicates if the fee assignment is currently active"""
  isActive: Boolean!

  """Individual student assignments created from this bulk assignment"""
  studentAssignments: [StudentFeeAssignment!]!
  studentsAssignedCount: Int!

  """The ID of the tenant this fee assignment belongs to"""
  tenantId: String!

  """The date and time when the fee assignment was last updated"""
  updatedAt: DateTime!
}

"""Fee assignment with detailed student information and fee items"""
type FeeAssignmentWithStudents {
  """The fee assignment details"""
  feeAssignment: FeeAssignment!

  """All student assignments for this fee assignment"""
  studentAssignments: [StudentFeeAssignment!]!

  """Total number of students assigned"""
  totalStudents: Int!
}

"""Represents a fee category/bucket like Tuition, Transport, etc."""
type FeeBucket {
  """The date and time when the fee bucket was created"""
  createdAt: DateTime!

  """Description of the fee bucket"""
  description: String

  """The unique identifier of the fee bucket"""
  id: ID!

  """Indicates if the fee bucket is currently active"""
  isActive: Boolean!

  """The name of the fee bucket"""
  name: String!

  """The ID of the tenant this fee bucket belongs to"""
  tenantId: String!

  """The date and time when the fee bucket was last updated"""
  updatedAt: DateTime!
}

"""
Represents a fee structure for specific grades, terms and academic year
"""
type FeeStructure {
  """The academic year this fee structure belongs to"""
  academicYear: AcademicYear!

  """The ID of the academic year"""
  academicYearId: ID!

  """The date and time when the fee structure was created"""
  createdAt: DateTime!

  """The grade levels this fee structure applies to"""
  gradeLevels: [TenantGradeLevel!]

  """The unique identifier of the fee structure"""
  id: ID!

  """Indicates if the fee structure is currently active"""
  isActive: Boolean!

  """The fee items in this structure"""
  items: [FeeStructureItem!]!

  """The name of the fee structure"""
  name: String!

  """The ID of the tenant this fee structure belongs to"""
  tenantId: String!

  """The terms this fee structure applies to"""
  terms: [Term!]!

  """The date and time when the fee structure was last updated"""
  updatedAt: DateTime!
}

"""Represents individual fee items within a fee structure"""
type FeeStructureItem {
  """The amount for this fee item"""
  amount: Float!

  """When this fee item was created"""
  createdAt: DateTime!

  """The fee bucket this item belongs to"""
  feeBucket: FeeBucket!

  """The ID of the fee bucket"""
  feeBucketId: ID!

  """The fee structure this item belongs to"""
  feeStructure: FeeStructure!

  """The ID of the fee structure"""
  feeStructureId: ID!

  """The unique identifier of the fee structure item"""
  id: ID!

  """Indicates if this fee item is mandatory"""
  isMandatory: Boolean!

  """The ID of the tenant this fee structure item belongs to"""
  tenantId: String!

  """When this fee item was last updated"""
  updatedAt: DateTime!
}

input FilterInput {
  streamIds: [ID!]
  tenantGradeLevelIds: [ID!]
  tenantSubjectIds: [ID!]
}

type FilteredResult {
  students: [Student!]
  teachers: [Teacher!]
  totalCount: Float!
}

input ForgotPasswordInput {
  email: String!
}

input GenerateQuestionsInput {
  grade: String!
  marksPerQuestion: Int!
  numberOfQuestions: Int!
  prompt: String!
  sampleQuestion: String
  subject: String!
}

type GeneratedOptionOutput {
  isCorrect: Boolean!
  order: Int!
  text: String!
}

type GeneratedQuestionOutput {
  aiPrompt: String
  isAIGenerated: Boolean!
  marks: Int!
  options: [GeneratedOptionOutput!]!
  order: Int!
  text: String!
  type: String!
}

"""Input for retrieving fee assignments by specific tenant grade levels"""
input GetFeeAssignmentsByGradeLevelsInput {
  """Optional fee structure ID to filter by specific fee structure"""
  feeStructureId: ID

  """Array of tenant grade level IDs to filter by"""
  tenantGradeLevelIds: [ID!]!
}

type Grade {
  academicYear: String!
  assessmentName: String!
  assessmentType: AssessmentType!
  classId: String!
  dateRecorded: DateTime!
  gradeId: ID!
  isPublished: Boolean!
  letterGrade: String
  marksObtained: Float!
  percentage: Float!
  points: Float
  recordedBy: String!
  studentId: String!
  subjectId: String!
  term: String!
  totalMarks: Float!
}

type GradeLevel {
  age: Float
  code: String!
  curriculum: Curriculum!
  id: ID!
  level: Level!
  name: String!
  order: Float!
  schoolLevel: SchoolLevel
}

type GradeLevelInfo {
  age: Float
  code: String
  id: ID!
  name: String!
  order: Float
  streams: [StreamInfo!]!
}

type GradeLevelOutput {
  id: ID!
  name: String!
}

type GradeLevelWithStreamsOutput {
  id: String!
  name: String!
  streams: [StreamOutput!]!
}

type Hostel {
  capacity: Int!
  createdAt: DateTime!
  feeAmount: Float!
  genderConstraint: String
  hostelAssignments: [HostelAssignment!]
  id: ID!
  isActive: Boolean!
  name: String!
  tenantId: String!
  updatedAt: DateTime!
}

type HostelAssignment {
  assignedAt: DateTime!
  bedNumber: String
  createdAt: DateTime!
  hostel: Hostel!
  id: ID!
  roomNumber: String
  status: String!
  student: Student!
  tenantId: String!
  vacatedAt: DateTime
}

type HostelService {
  assignments: [HostelAssignment!]
  isAssigned: Boolean!
}

type InvitationInfo {
  email: String!
  role: MembershipRole!
  tenantName: String!
}

enum InvitationStatus {
  ACCEPTED
  ALREADY_EXISTS
  BLOCKED
  CANCELLED
  DECLINED
  DUPLICATE
  ERROR
  EXPIRED
  FAILED
  INVALID
  NOT_FOUND
  PENDING
  REVOKED
}

type InviteParentResponse {
  createdAt: DateTime!
  email: String!
  name: String!
  status: String!
  studentAdmissionNumber: String
  students: [StudentSummaryDto!]!
}

type InviteStaffResponse {
  createdAt: DateTime!
  email: String!
  fullName: String!
  status: String!
}

type InviteTeacherResponse {
  createdAt: DateTime!
  email: String!
  fullName: String!
  status: String!
}

"""Represents an invoice for student fees"""
type Invoice {
  """The academic year this invoice belongs to"""
  academicYear: AcademicYear!

  """The ID of the academic year"""
  academicYearId: ID!

  """The remaining balance"""
  balance: Float!

  """The date and time when the invoice was created"""
  createdAt: DateTime!

  """The ID of the user who created this invoice"""
  createdBy: ID!

  """The user who created this invoice"""
  createdByUser: User!

  """Additional notes or description"""
  description: String

  """The due date for payment"""
  dueDate: DateTime!

  """The unique identifier of the invoice"""
  id: ID!

  """The invoice number"""
  invoiceNumber: String!

  """Indicates if the invoice is currently active"""
  isActive: Boolean!

  """The date when the invoice was issued"""
  issueDate: DateTime!

  """The amount paid so far"""
  paidAmount: Float!

  """The status of the invoice"""
  status: InvoiceStatus!

  """The student this invoice belongs to"""
  student: Student!

  """The ID of the student"""
  studentId: ID!

  """The ID of the tenant this invoice belongs to"""
  tenantId: String!

  """The term this invoice belongs to"""
  term: Term!

  """The ID of the term"""
  termId: ID!

  """The total amount of the invoice"""
  totalAmount: Float!

  """The date and time when the invoice was last updated"""
  updatedAt: DateTime!
}

"""The status of an invoice"""
enum InvoiceStatus {
  CANCELLED
  DRAFT
  OVERDUE
  PAID
  PARTIALLY_PAID
  PENDING
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Level {
  description: String
  gradeLevels: [GradeLevel!]
  grades: [Grade!]!
  id: ID!
  name: String!
  schoolType: SchoolTypeConfig!
}

type MarksStatsDto {
  entered: Float!
  highest: Float!
  lowest: Float!
  mean: String!
  total: Float!
}

enum MembershipRole {
  PARENT
  SCHOOL_ADMIN
  SCHOOL_MANAGER
  STAFF
  STUDENT
  SUPER_ADMIN
  TEACHER
  TREASURER
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  PENDING
  SUSPENDED
}

type Mutation {
  acceptParentInvitation(acceptInvitationInput: AcceptInvitationInput!): AcceptParentInvitationResponse!
  acceptStaffInvitation(acceptInvitationInput: AcceptStaffInvitationInput!): AcceptStaffInvitationResponse!
  acceptTeacherInvitation(acceptInvitationInput: AcceptInvitationInput!): AcceptInvitationResponse!
  activateTenantSubject(tenantSubjectId: String!): Boolean!
  addStudentsToParent(parentId: String!, studentIds: [String!]!, tenantId: String!): String!
  assignClassTeacher(input: AssignStreamClassTeacherInput!): ClassTeacherAssignment!
  assignGradeLevelClassTeacher(input: AssignGradeLevelClassTeacherInput!): ClassTeacherAssignment!
  assignScholarship(input: AssignScholarshipInput!): StudentScholarship!
  assignStudentToHostel(input: CreateHostelAssignmentInput!): HostelAssignment!
  assignStudentToRoute(input: AssignTransportInput!): TransportAssignment!
  assignStudentsToRoute(input: BulkTransportAssignmentInput!): [TransportAssignment!]!
  bulkAssignStudentsToRoute(input: BulkTransportAssignmentInput!): [TransportAssignment!]!

  """Bulk create fee structure items for a specific fee structure"""
  bulkCreateFeeStructureItems(
    feeStructureId: ID!

    """Array of fee structure items to create"""
    items: [CreateFeeStructureItemInput!]!
  ): [FeeStructureItem!]!

  """
  Bulk toggle fee items by fee structure item and grade levels (e.g., activate transport for all Grade 1 students)
  """
  bulkToggleByFeeStructureItem(bulkToggleByFeeStructureItemInput: BulkToggleByFeeStructureItemInput!): [StudentFeeItem!]!

  """Bulk activate or deactivate multiple student fee items"""
  bulkToggleStudentFeeItems(bulkToggleInput: BulkToggleStudentFeeItemsInput!): [StudentFeeItem!]!
  changePassword(changePasswordInput: ChangePasswordInput!): PasswordResetResponse!
  configureSchoolLevelsByNames(levelNames: [String!]!): SchoolConfigurationResponse!

  """Create a new academic year for the tenant"""
  createAcademicYear(
    """Academic year creation input data"""
    input: CreateAcademicYearInput!
  ): AcademicYear!
  createAssessment(input: CreateAssessmentInput!): AssessmentOutput!
  createCustomSubject(input: CreateCustomSubjectInput!): TenantSubject!

  """
  Create a new fee assignment and assign it to students in specified grade levels
  """
  createFeeAssignment(createFeeAssignmentInput: CreateFeeAssignmentInput!): FeeAssignment!

  """Create a new fee bucket"""
  createFeeBucket(input: CreateFeeBucketInput!): FeeBucket!

  """Create a new fee structure (items added separately)"""
  createFeeStructure(input: CreateFeeStructureInput!): FeeStructure!

  """Create a new fee structure item"""
  createFeeStructureItem(input: CreateFeeStructureItemInput!): FeeStructureItem!
  createHostel(input: CreateHostelInput!): Hostel!

  """Create a new invoice"""
  createInvoice(input: CreateInvoiceInput!): Invoice!

  """Record a new payment"""
  createPayment(input: CreatePaymentInput!): Payment!
  createScholarship(input: CreateScholarshipInput!): Scholarship!
  createStream(input: CreateStreamInput!): StreamType!
  createStudent(createStudentInput: CreateStudentInput!): CreateStudentResponse!
  createTenantStreamFromScratch(input: CreateTenantStreamInput!): TenantStream!

  """Create a new term within an academic year"""
  createTerm(
    """Term creation input data"""
    input: CreateTermInput!
  ): Term!
  createTest(createTestInput: CreateTestInput!): Test!
  createTransportRoute(input: CreateTransportRouteInput!): TransportRoute!
  createUser(signupInput: SignupInput!): CreateUserResponse!
  deactivateTenantSubject(tenantSubjectId: String!): Boolean!

  """Delete an academic year"""
  deleteAcademicYear(id: ID!): Boolean!
  deleteAssignment(id: String!): Boolean!
  deleteCA(id: String!): Boolean!
  deleteExam(id: String!): Boolean!

  """Delete a fee bucket"""
  deleteFeeBucket(id: ID!): Boolean!

  """Permanently delete a fee structure (tenant scoped)"""
  deleteFeeStructure(id: ID!): Boolean!

  """
  Permanently delete a single fee-structure item (must belong to the logged-in tenant). Returns true when the row was removed, or throws NotFoundException.
  """
  deleteFeeStructureItem(id: ID!): Boolean!

  """
  Delete all fee structure items for a specific fee structure and return count
  """
  deleteFeeStructureItemsByStructure(feeStructureId: ID!): Float!

  """Delete an invoice"""
  deleteInvoice(id: ID!): Boolean!

  """Delete a payment (only for non-completed payments)"""
  deletePayment(id: ID!): Boolean!
  deleteStaff(id: ID!): Boolean!
  deleteStream(id: ID!): Boolean!
  deleteTeacher(id: String!, tenantId: String!): String!
  deleteTenantStream(tenantStreamId: String!): Boolean!
  deleteTenantSubject(tenantSubjectId: String!): Boolean!

  """Delete a term"""
  deleteTerm(id: ID!): Boolean!
  deleteTransportRoute(id: ID!): Boolean!
  enterStudentMarks(inputs: [EnterStudentMarksInput!]!): [AssessmentMark!]!
  forgotPassword(forgotPasswordInput: ForgotPasswordInput!): PasswordResetResponse!
  generateQuestions(generateQuestionsInput: GenerateQuestionsInput!): [GeneratedQuestionOutput!]!
  inviteParent(createParentDto: CreateParentInvitationDto!, studentIds: [String!]!, tenantId: String!): InviteParentResponse!
  inviteStaff(createStaffDto: CreateStaffInvitationDto!): InviteStaffResponse!
  inviteTeacher(createTeacherDto: CreateTeacherInvitationDto!): InviteTeacherResponse!

  """Mark attendance for students in a specific grade"""
  markAttendance(markAttendanceInput: CreateAttendanceInput!): [Attendance!]!
  markChatAsRead(chatRoomId: String!): Boolean!

  """
  Refresh search cache for current user tenant (placeholder for future caching)
  """
  refreshSearchCache: Boolean!

  """Refund a completed payment"""
  refundPayment(id: ID!, refundReason: String): Payment!

  """Delete a fee assignment and all related student assignments"""
  removeFeeAssignment(id: ID!): Boolean!
  removeHostel(id: String!): Boolean!
  removeHostelAssignment(id: String!): Boolean!
  removeScholarship(id: ID!): Boolean!
  removeStudentFromRoute(input: RemoveTransportAssignmentInput!): Boolean!
  removeStudentScholarship(id: String!): Boolean!
  removeTransportRoute(id: String!): Boolean!
  resendTeacherInvitation(invitationId: String!): InviteTeacherResponse!
  resetPassword(resetPasswordInput: ResetPasswordInput!): PasswordResetResponse!
  revokeInvitation(invitationId: String!): RevokeInvitationResponse!
  revokeParentInvitation(invitationId: String!): RevokeInvitationResponse!
  revokeStudent(studentId: String!): String!
  runFullSocketTest: String!

  """Search students and cache results for performance"""
  searchAndCacheStudents(input: SearchStudentInput!): SearchStudentResult!

  """Search teachers and cache results for performance"""
  searchAndCacheTeachers(input: SearchStudentInput!): SearchTeacherResult!
  sendMessageToAllParents(input: BroadcastMessageInput!): [ChatMessage!]!
  sendMessageToAllStudents(input: BroadcastMessageInput!): [ChatMessage!]!
  sendMessageToParent(input: SendMessageInput!): ChatMessage!
  sendMessageToStudent(input: SendMessageInput!): ChatMessage!

  """Mark an academic year as the current one"""
  setCurrentAcademicYear(id: ID!): AcademicYear!

  """Mark a term as the current one for its academic year"""
  setCurrentTerm(id: ID!): Term!
  signIn(signInInput: SignInInput!): AuthResponse!
  submitAssignment(input: CreateAssignmentSubmissionInput!): AssignmentSubmission!

  """Activate or deactivate an optional fee item for a student"""
  toggleStudentFeeItem(isActive: Boolean!, studentFeeItemId: ID!): StudentFeeItem!
  toggleTenantStream(activate: Boolean!, tenantStreamId: String!): Boolean!
  unassignClassTeacher(input: UnassignClassTeacherInput!): Boolean!

  """Update an academic year"""
  updateAcademicYear(id: ID!, input: UpdateAcademicYearInput!): AcademicYear!
  updateCustomSubject(input: UpdateTenantSubjectInput!, tenantSubjectId: String!): TenantSubject!

  """Update a fee assignment"""
  updateFeeAssignment(id: ID!, updateFeeAssignmentInput: UpdateFeeAssignmentInput!): FeeAssignment!

  """Update an existing fee bucket"""
  updateFeeBucket(id: ID!, input: UpdateFeeBucketInput!): FeeBucket!

  """Update a fee structure (full item replacement)"""
  updateFeeStructure(id: ID!, input: UpdateFeeStructureInput!): FeeStructure!

  """
  Update a single fee-structure item that belongs to the current tenant. Only the fields supplied in the input are changed; all others are left intact. Returns the fully hydrated item (bucket, structure, academic-year, term, grade-level).
  """
  updateFeeStructureItem(id: ID!, input: UpdateFeeStructureItemInput!): FeeStructureItem!
  updateHostel(input: UpdateHostelInput!): Hostel!
  updateHostelAssignment(input: UpdateHostelAssignmentInput!): HostelAssignment!

  """Update an existing invoice"""
  updateInvoice(id: ID!, input: UpdateInvoiceInput!): Invoice!

  """Update the payment status of an invoice"""
  updateInvoicePaymentStatus(id: ID!, paidAmount: Float!): Invoice!

  """Update an existing payment"""
  updatePayment(id: ID!, input: UpdatePaymentInput!): Payment!
  updateScholarship(input: UpdateScholarshipInput!): Scholarship!
  updateStaff(updateInput: UpdateStaffInput!): StaffDto!
  updateStream(input: UpdateStreamInput!): StreamType!
  updateStudentMarks(inputs: [EnterStudentMarksInput!]!): [AssessmentMark!]!
  updateStudentScholarship(input: UpdateStudentScholarshipInput!): StudentScholarship!
  updateTenantStream(input: UpdateTenantStreamInput!, tenantStreamId: String!): TenantStream!

  """Update a term"""
  updateTerm(id: ID!, input: UpdateTermInput!): Term!
  updateTest(updateTestInput: UpdateTestInput!): Test!
  updateTransportAssignment(input: UpdateTransportAssignmentInput!): TransportAssignment!
  updateTransportRoute(input: UpdateTransportRouteInput!): TransportRoute!
}

type Option {
  id: ID!
  imageUrl: String
  isCorrect: Boolean!
  order: Float!
  question: Question!
  text: String!
}

type Parent {
  address: String
  createdAt: DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  occupation: String
  parentStudents: [ParentStudent!]!
  phone: String!
  tenantId: ID!
  updatedAt: DateTime!
  user: User
}

type ParentDto {
  address: String
  createdAt: DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  occupation: String
  phone: String!
  students: [StudentForParentDto!]!
  updatedAt: DateTime!
  userId: String
}

type ParentInfo {
  email: String!
  isPrimary: Boolean!
  name: String!
  parentId: ID!
  phone: String!
  relationship: String!
}

"""The method used by the parent to link to a student"""
enum ParentLinkingMethod {
  MANUAL_INPUT
  SEARCH_BY_ADMISSION
  SEARCH_BY_NAME
}

type ParentStudent {
  createdAt: DateTime!
  id: ID!
  isPrimary: Boolean!
  parent: Parent!
  parentId: ID!
  relationship: String!
  student: Student!
  studentId: ID!
  tenantId: ID!
  updatedAt: DateTime!
}

type PasswordResetResponse {
  message: String!
}

"""Represents a payment made by a student"""
type Payment {
  """The amount paid"""
  amount: Float!

  """The date and time when the payment was created"""
  createdAt: DateTime!

  """The unique identifier of the payment"""
  id: ID!

  """The invoice this payment is for"""
  invoice: Invoice

  """The ID of the invoice this payment is for"""
  invoiceId: ID

  """Indicates if the payment is currently active"""
  isActive: Boolean!

  """Additional notes about the payment"""
  notes: String

  """The date when the payment was made"""
  paymentDate: DateTime!

  """The method used for payment"""
  paymentMethod: PaymentMethod!

  """The ID of the user who recorded this payment"""
  recordedBy: ID!

  """The user who recorded this payment"""
  recordedByUser: User!

  """The payment reference number"""
  referenceNumber: String!

  """The status of the payment"""
  status: PaymentStatus!

  """The student making the payment"""
  student: Student!

  """The ID of the student making the payment"""
  studentId: ID!

  """The ID of the tenant this payment belongs to"""
  tenantId: String!

  """Transaction ID from payment provider"""
  transactionId: String

  """The date and time when the payment was last updated"""
  updatedAt: DateTime!
}

"""The method used for payment"""
enum PaymentMethod {
  BANK_TRANSFER
  CARD
  CASH
  CHEQUE
  MOBILE_MONEY
  ONLINE
}

"""The status of a payment"""
enum PaymentStatus {
  CANCELLED
  COMPLETED
  FAILED
  PENDING
  REFUNDED
}

"""Payment summary for a student"""
type PaymentSummary {
  """Number of payments"""
  paymentCount: Int!

  """Total amount paid"""
  totalPaid: Float!

  """Total amount pending"""
  totalPending: Float!

  """Total amount refunded"""
  totalRefunded: Float!
}

type PendingInvitation {
  createdAt: DateTime!
  email: String!
  id: String!
  invitedBy: User
  role: String!
  status: InvitationStatus!
}

type PendingInvitationResponse {
  email: String!
  id: String!
  lastSentAt: DateTime
  name: String
  status: InvitationStatus!
  userData: JSON
}

type Query {
  """Get a specific academic year by ID"""
  academicYear(id: ID!): AcademicYear!

  """Get all academic years for the current tenant"""
  academicYears: [AcademicYear!]!
  activeStreams: [StreamType!]!
  allStudentScholarships: [StudentScholarship!]!
  allStudents: [Student!]!
  allUsersOfTenant(tenantId: String!): [TenantUserSummary!]!
  assessments(filter: AssessmentFilterInput): [AssessmentOutput!]!

  """Get all students assigned to a specific fee assignment"""
  assignedStudents(feeAssignmentId: ID!): [StudentFeeAssignment!]!
  deactivatedTenantSubjects: [TenantSubject!]!

  """Get a specific fee assignment by ID"""
  feeAssignment(id: ID!): FeeAssignment!

  """Get all fee assignments for the current tenant"""
  feeAssignments: [FeeAssignment!]!

  """Get a single fee bucket by ID"""
  feeBucket(id: ID!): FeeBucket!

  """Get all fee buckets for the current tenant"""
  feeBuckets: [FeeBucket!]!

  """Get a single fee structure by id (tenant scoped)"""
  feeStructure(id: ID!): FeeStructure

  """
  Returns the single active fee-structure that matches the supplied academic-year, term and tenant-grade-level (all scoped to the logged-in tenant). Includes items and their buckets.
  """
  feeStructureByGradeAndTerm(academicYearId: ID!, termId: ID!): FeeStructure

  """Get a single fee structure item by ID"""
  feeStructureItem(id: ID!): FeeStructureItem!

  """Get all fee structure items for the tenant"""
  feeStructureItems: [FeeStructureItem!]!

  """Get all fee structure items for a specific fee structure"""
  feeStructureItemsByStructure(feeStructureId: ID!): [FeeStructureItem!]!

  """Get the total amount for all mandatory items in a fee structure"""
  feeStructureMandatoryAmount(feeStructureId: ID!): Float!

  """Get the total amount for all optional items in a fee structure"""
  feeStructureOptionalAmount(feeStructureId: ID!): Float!

  """Get the total amount for all items in a fee structure"""
  feeStructureTotalAmount(feeStructureId: ID!): Float!

  """
  Returns every active fee-structure that belongs to the logged-in tenant, with their items, buckets and grade-level details.
  """
  feeStructures: [FeeStructure!]!

  """Filter students and teachers by grade levels, subjects, and streams"""
  filterByGradeLevelAndSubjects(input: FilterInput!): FilteredResult!
  findAllHostels: [Hostel!]!

  """Get all mandatory fee structure items for a specific fee structure"""
  findMandatoryItems(feeStructureId: ID!): [FeeStructureItem!]!
  getAllClassTeacherAssignments: [ClassTeacherAssignment!]!
  getAllParents: [ParentDto!]!
  getAllStaff: [StaffDto!]!
  getAllTeachers: [Teacher!]!

  """
  Get all fee assignments for the current tenant with complete student and grade level data
  """
  getAllTenantFeeAssignments: TenantFeeAssignmentSummary!
  getAssignment(id: ID!): Assignment!
  getAssignmentsByRoute(routeId: String!): [TransportAssignment!]!
  getAttendanceByDate(date: String!, gradeId: String!): [Attendance!]!

  """Get all students and teachers for current user tenant"""
  getBothStudentsAndTeachersByTenant: CombinedSearchResult!
  getChatMessages(chatRoomId: String!, limit: Float = 50, offset: Float = 0): [ChatMessage!]!

  """Get a specific fee assignment by ID with all student details"""
  getFeeAssignmentById(feeAssignmentId: ID!): FeeAssignmentWithStudents!

  """
  Get fee assignments for specific tenant grade levels with all student details and fee items
  """
  getFeeAssignmentsByGradeLevels(input: GetFeeAssignmentsByGradeLevelsInput!): [FeeAssignmentWithStudents!]!
  getGradeLevelClassTeacher(gradeLevelId: String!): ClassTeacherAssignment
  getMyAssignmentss(limit: Float = 10, offset: Float = 0, status: AssignmentStatus, subjectId: ID): AssignmentsResponse!
  getMyChats: [ChatRoom!]!
  getParentsByTenant(tenantId: String!): [Parent!]!
  getPendingInvitations(tenantId: String!): [PendingInvitation!]!
  getPendingParentInvitations(tenantId: String!): [PendingInvitation!]!
  getPendingTeacherInvitation(email: String!): PendingInvitationResponse
  getPendingTeacherInvitations: [PendingInvitationResponse!]
  getSchoolConfiguration: SchoolConfigurationResponse!
  getSocketClients: [String!]!
  getStaffById(id: ID!): StaffDto!
  getStreamClassTeacher(streamId: String!): ClassTeacherAssignment

  """Get all streams for current user tenant"""
  getStreamsByTenant: [Stream!]!
  getStudentsByGrade(gradeId: String!): [Student!]!

  """Get all students for current user tenant"""
  getStudentsByTenant: SearchStudentResult!
  getStudentsForParent(parentId: String!, tenantId: String!): [StudentSearchResponse!]!
  getTeacher: Teacher!

  """Get all teachers for current user tenant"""
  getTeachersByTenant: SearchTeacherResult!
  getTeachersByTenants: [TeacherDto!]!

  """
  Get statistics for current user tenant (student count, teacher count, etc.)
  """
  getTenantStatistics: String!
  getTenantStreams(tenantGradeLevelId: String): [TenantStream!]!
  getTenantSubjects(curriculumId: String): [TenantSubject!]!
  getUnreadMessageCount: Float!
  gradeLevelsForSchoolType: [TenantGradeLevel!]!
  gradeLevelsWithStreams: [GradeLevelWithStreamsOutput!]!
  hostel(id: String!): Hostel!
  hostelAssignments(hostelId: String!): [HostelAssignment!]!

  """Get a single invoice by ID"""
  invoice(id: ID!): Invoice!

  """Get all invoices for the current tenant"""
  invoices: [Invoice!]!

  """Get all invoices with a specific status"""
  invoicesByStatus(status: InvoiceStatus!): [Invoice!]!

  """Get all invoices for a specific student"""
  invoicesByStudent(studentId: ID!): [Invoice!]!
  marksStats(academicYear: String!, gradeLevelId: String!, subjectId: String!, term: Int!): MarksStatsDto!

  """
  Get academic summary and profile for the currently authenticated student
  """
  myAcademicProfile: StudentAcademicProfile!
  myAssignMents: [Test!]!

  """
  Get the complete student profile for the currently authenticated student
  """
  myStudentProfile: Student!

  """
  Get all services (hostel, transport, scholarship) for the currently authenticated student
  """
  myStudentServices: StudentServicesProfile!

  """Get all optional fee structure items for a specific fee structure"""
  optionalFeeStructureItems(feeStructureId: ID!): [FeeStructureItem!]!

  """Get all overdue invoices"""
  overdueInvoices: [Invoice!]!

  """Get a single payment by ID"""
  payment(id: ID!): Payment!

  """Get a payment by reference number"""
  paymentByReferenceNumber(referenceNumber: String!): Payment!

  """Get payment summary for a specific student"""
  paymentSummaryByStudent(studentId: ID!): PaymentSummary!

  """Get all payments for the current tenant"""
  payments: [Payment!]!

  """Get all payments for a specific invoice"""
  paymentsByInvoice(invoiceId: ID!): [Payment!]!

  """Get all payments with a specific status"""
  paymentsByStatus(status: PaymentStatus!): [Payment!]!

  """Get all payments for a specific student"""
  paymentsByStudent(studentId: ID!): [Payment!]!
  scholarship(id: ID!): Scholarship!
  scholarships: [Scholarship!]!
  searchAvailableStudentsForParent(parentId: String!, searchTerm: String, tenantId: String!): [StudentSearchResponse!]!
  searchStudentByAdmission(admissionNumber: String!, tenantId: String!): StudentSearchResponse
  searchStudentsByManualInput(studentFullName: String, studentGrade: String, studentPhone: String, tenantId: String!): [StudentSearchResponse!]!
  searchStudentsByName(name: String!, tenantId: String!): [StudentSearchResponse!]!

  """Search for teachers by name within current user tenant"""
  searchTeachersByName(input: SearchStudentInput!): SearchTeacherResult!
  stream(id: ID!): StreamType!
  streams: [StreamType!]!
  streamsByGradeLevel(gradeLevelId: ID!): [StreamType!]!

  """Get all fee assignments for a specific student"""
  studentFeeAssignments(studentId: ID!): [StudentFeeAssignment!]!

  """Get all fee items for a specific student"""
  studentFeeItems(studentId: ID!): [StudentFeeItem!]!

  """Get student profile by ID (only accessible by the student themselves)"""
  studentProfileById(studentId: ID!): Student!
  studentScholarships(studentId: String!): [StudentScholarship!]!
  studentsByGradeLevel(tenantGradeLevelId: ID!): [Student!]!
  studentsForTenant: [StudentLoginInfo!]!
  teacherGetParentById(parentId: String!): Parent
  teacherGetParents: [Parent!]!
  teacherGetParentsByStudentId(studentId: String!): [Parent!]!
  teacherGetPrimaryParentByStudentId(studentId: String!): Parent
  teacherGetStudentById(studentId: String!): Student
  teacherGetStudentParentRelationships: [ParentStudent!]!
  teacherGetStudents: [TeacherStudentDto!]!
  teacherGetStudentsByGradeLevel(gradeLevelId: String!): [Student!]!
  teacherGetStudentsByStream(streamId: String!): [Student!]!
  teacherGetStudentsWithParents: [StudentWithParentsType!]!

  """Get all fee items for a tenant"""
  tenantFeeItems: [StudentFeeItem!]!
  tenantStreams: [TenantStream!]!
  tenantSubjects: [TenantSubject!]!

  """Retrieves a single term by its ID"""
  term(
    """The ID of the term"""
    id: ID!
  ): Term!
  termAssessmentsWithStudents(academicYear: String!, gradeLevelId: String!, term: Int!): TermAssessmentWithStudentsDto!

  """Get all terms for a specific academic year"""
  termsByAcademicYear(academicYearId: ID!): [Term!]!
  testById(id: String!): Test
  testSocket(scenario: String): String!
  transportRoutes: [TransportRoute!]!
  users: [User!]!
  usersByTenant(role: String, tenantId: String!): [User!]!
}

type Question {
  aiPrompt: String
  id: ID!
  imageUrls: [String!]
  isAIGenerated: Boolean!
  marks: Float!
  options: [Option!]!
  order: Float!
  test: Test!
  text: String!
  type: String!
}

"""The supported question types"""
enum QuestionType {
  """Multiple choice question with several options"""
  MULTIPLE_CHOICE

  """Short answer question requiring text input"""
  SHORT_ANSWER

  """True or false question"""
  TRUE_FALSE
}

type ReferenceMaterial {
  createdAt: DateTime!
  fileSize: Float
  fileType: String!
  fileUrl: String!
  id: ID!
  test: Test!
}

input RemoveTransportAssignmentInput {
  """Transport route ID to remove student from"""
  routeId: ID!

  """Student ID to remove from transport route"""
  studentId: ID!
}

input ResetPasswordInput {
  confirmPassword: String!
  newPassword: String!
  token: String!
}

type RevokeInvitationResponse {
  message: String!
}

type Scholarship {
  amount: Float!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  studentScholarships: [StudentScholarship!]
  tenantId: String!
  type: String!
}

type ScholarshipService {
  currentScholarship: Scholarship
  hasScholarship: Boolean!
  scholarshipHistory: [Scholarship!]
}

type School {
  createdAt: DateTime!
  isActive: Boolean!
  schoolId: ID!
  schoolName: String!
  schoolType: SchoolType!
  subdomain: String!
  updatedAt: DateTime!
}

type SchoolConfigLevel {
  id: ID!
  level: Level!
}

type SchoolConfigurationResponse {
  createdAt: DateTime!
  id: ID!
  selectedLevels: [SelectedLevel!]!
  subjects: [SubjectInfo!]
  tenant: TenantInfo!
}

type SchoolLevel {
  curriculum: Curriculum
  curriculumSubjects: [CurriculumSubject!]
  gradeLevels: [GradeLevel!]
  id: ID!
  name: String!
  schoolType: SchoolType!
}

type SchoolType {
  code: String
  description: String
  icon: String
  id: ID!
  levels: [Level!]
  name: String!
  priority: Float
  schoolLevels: [SchoolLevel!]
  schools: [School!]
}

type SchoolTypeConfig {
  description: String!
  icon: String!
  levels: [SchoolTypeLevel!]!
  menuItems: [String!]!
  name: String!
  priority: Float!
  type: String!
}

type SchoolTypeGrade {
  age: Float!
  name: String!
}

type SchoolTypeLevel {
  description: String!
  grades: [SchoolTypeGrade!]!
  name: String!
}

input SearchStudentInput {
  name: String!
}

type SearchStudentResult {
  count: Float!
  students: [Student!]!
}

type SearchTeacherResult {
  count: Float!
  teachers: [Teacher!]!
}

type SelectedLevel {
  description: String
  gradeLevels: [GradeLevelInfo!]!
  id: ID!
  name: String!
  subjects: [SubjectInfo!]!
}

input SendMessageInput {
  imageUrl: String
  message: String!
  recipientId: String!
  recipientType: String!
  subject: String
}

input SignInInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  name: String!
  password: String!
  schoolName: String!
  schoolUrl: String
}

type StaffDto {
  address: String
  bankAccount: String
  bankName: String
  createdAt: DateTime!
  dateOfBirth: String
  dateOfJoining: String
  department: String
  email: String!
  emergencyContact: String
  emergencyContactPhone: String
  employeeId: String
  firstName: String!
  fullName: String!
  gender: String!
  hasCompletedProfile: Boolean!
  id: ID!
  isActive: Boolean!
  jobDescription: String
  lastName: String!
  nationalId: String
  phoneNumber: String
  qualifications: String
  role: String!
  salary: Float
  status: StaffStatus!
  supervisor: String
  updatedAt: DateTime!
  userId: String
  workExperience: String
}

type StaffInfo {
  id: ID!
  name: String!
  role: String!
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

type Stream {
  capacity: Int
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean
  name: String!
  tenant: Tenant!
  updatedAt: DateTime!
}

type StreamInfo {
  id: ID!
  name: String!
}

type StreamOutput {
  id: String!
  name: String!
}

type StreamType {
  capacity: Int
  createdAt: DateTime!
  description: String
  gradeLevel: GradeLevel!
  id: ID!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime!
}

type Student {
  admission_number: String!
  createdAt: DateTime!
  feesOwed: Float!
  gender: String!
  grade: TenantGradeLevel!
  hostelAssignments: [HostelAssignment!]
  id: ID!
  isActive: Boolean!
  phone: String!
  scholarships: Scholarship
  schoolType: String
  stream: Stream
  studentScholarships: [StudentScholarship!]
  tenant: Tenant!
  tenant_id: ID!
  totalFeesPaid: Float!
  transportAssignments: [TransportAssignment!]
  updatedAt: DateTime!
  user: User!
  user_id: ID!
}

type StudentAcademicProfile {
  academicSummary: AcademicSummary!
  student: Student!
}

"""Represents the assignment of a fee structure to a specific student"""
type StudentFeeAssignment {
  """The date and time when the assignment was created"""
  createdAt: DateTime!

  """The fee assignment this belongs to"""
  feeAssignment: FeeAssignment!

  """The ID of the fee assignment"""
  feeAssignmentId: ID!

  """The fee items assigned to this student"""
  feeItems: [StudentFeeItem!]!

  """The unique identifier of the student fee assignment"""
  id: ID!

  """Indicates if the assignment is currently active"""
  isActive: Boolean!

  """The student this fee assignment belongs to"""
  student: Student!

  """The ID of the student"""
  studentId: ID!

  """The ID of the tenant this assignment belongs to"""
  tenantId: String!

  """The date and time when the assignment was last updated"""
  updatedAt: DateTime!
}

"""Represents individual fee items assigned to a student"""
type StudentFeeItem {
  """The amount for this fee item"""
  amount: Float!

  """The date and time when the item was created"""
  createdAt: DateTime!

  """The fee structure item this is based on"""
  feeStructureItem: FeeStructureItem!

  """The ID of the fee structure item"""
  feeStructureItemId: ID!

  """The unique identifier of the student fee item"""
  id: ID!

  """Indicates if this fee item is currently active for the student"""
  isActive: Boolean!

  """Indicates if this fee item is mandatory"""
  isMandatory: Boolean!

  """The student fee assignment this item belongs to"""
  studentFeeAssignment: StudentFeeAssignment!

  """The ID of the student fee assignment"""
  studentFeeAssignmentId: ID!

  """The ID of the tenant this item belongs to"""
  tenantId: String!

  """The date and time when the item was last updated"""
  updatedAt: DateTime!
}

type StudentForParentDto {
  admissionNumber: String!
  firstName: String!
  grade: String!
  id: ID!
  isPrimary: Boolean!
  lastName: String!
  relationship: String!
}

type StudentLoginInfo {
  admission_number: String!
  email: String!
  grade: String!
  id: ID!
  name: String!
}

input StudentMarkInput {
  assessmentId: ID!
  score: Float!
}

type StudentScholarship {
  academicYear: String!
  awardedAt: DateTime!
  id: ID!
  scholarship: Scholarship!
  status: String!
  student: Student!
}

type StudentSearchResponse {
  admissionNumber: String!
  grade: String!
  id: String!
  name: String!
  phone: String
  streamId: String
}

type StudentServices {
  hostel: HostelService!
  scholarship: ScholarshipService!
  transport: TransportService!
}

type StudentServicesProfile {
  services: StudentServices!
  student: Student!
}

type StudentSummaryDto {
  admissionNumber: String!
  grade: String!
  id: String!
  name: String!
}

type StudentWithParentsType {
  admissionNumber: String!
  parents: [ParentInfo!]!
  studentId: ID!
}

type Subject {
  category: String
  code: String!
  creditHours: Float
  curriculum: String
  curriculumSubjects: [CurriculumSubject]
  department: String
  description: String
  id: ID!
  isCompulsory: Boolean
  name: String!
  passingMarks: Float
  shortName: String
  subjectType: String
  totalMarks: Float
}

type SubjectInfo {
  category: String
  code: String!
  creditHours: Float
  curriculum: String!
  department: String
  id: ID!
  isCompulsory: Boolean!
  name: String!
  passingMarks: Float
  shortName: String
  subjectType: String!
  totalMarks: Float
}

type SubjectOutput {
  id: ID!
  name: String!
}

"""The type of the subject"""
enum SubjectType {
  ACADEMIC
  ARTS
  COMPULSORY
  CORE
  ELECTIVE
  MIXED
  OPTIONAL
  PRACTICAL
  SPORTS
  THEORY
  VOCATIONAL
}

enum SubjectTypeEnum {
  CORE
  ELECTIVE
}

type Subscription {
  messageAdded: ChatMessage!
}

type Teacher {
  address: String
  classTeacherAssignments: [ClassTeacherAssignment!]
  createdAt: DateTime!
  dateOfBirth: DateTime
  department: String!
  email: String!
  employeeId: String
  firstName: String!
  fullName: String!
  gender: String!
  hasCompletedProfile: Boolean
  id: ID!
  isActive: Boolean
  lastName: String!
  phoneNumber: String!
  qualifications: String
  role: String!
  school: School
  tenant: Tenant!
  tenantGradeLevels: [TenantGradeLevel!]
  tenantStreams: [TenantStream!]
  tenantSubjects: [TenantSubject!]
  updatedAt: DateTime!
  user: User
}

type TeacherDto {
  address: String
  dateOfBirth: DateTime
  department: String!
  email: String!
  employeeId: String
  firstName: String!
  fullName: String!
  gender: String!
  hasCompletedProfile: Boolean!
  id: ID!
  isActive: Boolean!
  lastName: String!
  phoneNumber: String!
  subject: String
  userId: String
}

type TeacherOutput {
  id: String!
  name: String!
}

type TeacherStudentDto {
  admission_number: String!
  createdAt: DateTime!
  feesOwed: Float!
  gender: String!
  grade: TeacherStudentGradeDto
  grade_level_id: ID
  id: ID!
  phone: String!
  stream: TeacherStudentStreamDto
  streamId: ID
  totalFeesPaid: Float!
  updatedAt: DateTime!
}

type TeacherStudentGradeDto {
  code: String!
  id: ID!
  name: String!
}

type TeacherStudentStreamDto {
  id: ID!
  name: String!
}

type Tenant {
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean!
  memberships: [UserTenantMembership!]!
  name: String!
  subdomain: String!
  updatedAt: DateTime!
}

"""
Complete fee assignment data for a tenant including all grade levels and students
"""
type TenantFeeAssignmentSummary {
  """All fee assignments for this tenant"""
  feeAssignments: [FeeAssignmentWithStudents!]!

  """The tenant ID"""
  tenantId: ID!

  """Total number of fee assignments"""
  totalFeeAssignments: Int!

  """Total number of students with fee assignments"""
  totalStudentsWithFees: Int!
}

type TenantGradeLevel {
  createdAt: DateTime!
  curriculum: Curriculum!
  gradeLevel: GradeLevel!
  id: ID!
  isActive: Boolean!
  shortName: String
  sortOrder: Float
  tenant: Tenant!
  tenantStreams: [TenantStream!]
  updatedAt: DateTime!
}

type TenantGradeLevelOutput {
  gradeLevel: GradeLevelOutput
  id: ID!
}

type TenantInfo {
  id: ID!
  schoolName: String!
  subdomain: String
}

type TenantStream {
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  stream: Stream!
  tenant: Tenant!
  tenantGradeLevel: TenantGradeLevel!
  updatedAt: DateTime!
}

type TenantSubject {
  createdAt: DateTime!
  creditHours: Float
  curriculum: Curriculum!
  customSubject: CustomSubject
  id: ID!
  isActive: Boolean!
  isCompulsory: Boolean!
  passingMarks: Float
  subject: Subject
  subjectType: String!
  totalMarks: Float
  updatedAt: DateTime!
}

type TenantSubjectOutput {
  id: ID!
  subject: SubjectOutput
}

type TenantUserSummary {
  email: String!
  id: String!
  name: String!
  role: MembershipRole!
  tenantId: String!
}

"""Represents an academic term"""
type Term {
  """The academic year to which this term belongs"""
  academicYear: AcademicYear!

  """The ID of the academic year this term belongs to"""
  academicYearId: ID!

  """The date and time when the term was created"""
  createdAt: DateTime!

  """The end date of the term"""
  endDate: DateTime!

  """The unique identifier of the term"""
  id: ID!

  """Indicates if the term is currently active"""
  isActive: Boolean!
  isCurrent: Boolean!

  """The name of the term"""
  name: String!

  """The start date of the term"""
  startDate: DateTime!

  """The ID of the tenant this term belongs to"""
  tenantId: String!

  """The date and time when the term was last updated"""
  updatedAt: DateTime!
}

type TermAssessmentWithStudentsDto {
  assessments: [Assessment!]!
  students: [Student!]!
}

type Test {
  createdAt: DateTime!
  date: DateTime!
  duration: Float!
  endTime: String
  gradeLevels: [TenantGradeLevel!]!
  id: ID!
  instructions: String
  questions: [Question!]!
  referenceMaterials: [ReferenceMaterial!]!
  resourceUrl: String
  startTime: String!
  status: String!
  subject: TenantSubject!
  teacher: User!
  title: String!
  totalMarks: Float!
  updatedAt: DateTime!
}

type TokenPair {
  accessToken: String!
  refreshToken: String!
}

type TokenResponse {
  accessToken: String!
  refreshToken: String!
}

type TokensOutput {
  accessToken: String!
  refreshToken: String!
}

type TransportAssignment {
  assignedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  pickupPoint: String
  route: TransportRoute
  routeId: ID!
  status: String!
  student: Student
  studentId: ID!
  tenantId: String!
  vacatedAt: DateTime
}

type TransportRoute {
  assignments: [TransportAssignment!]
  billingCycleLabel: String
  createdAt: DateTime!
  fee: Float!
  id: ID!
  name: String!
  tenantId: String!
}

type TransportService {
  assignments: [TransportAssignment!]
  isAssigned: Boolean!
  pickupPoint: String
  route: TransportRoute
}

input UnassignClassTeacherInput {
  teacherId: ID!
}

input UpdateAcademicYearInput {
  endDate: String
  isActive: Boolean
  isCurrent: Boolean
  name: String
  startDate: String
}

"""Input for updating a fee assignment"""
input UpdateFeeAssignmentInput {
  """Updated description or notes"""
  description: String

  """The ID of the fee structure to assign"""
  feeStructureId: String

  """Whether the assignment is active"""
  isActive: Boolean

  """Array of tenant grade level IDs (not grade level IDs)"""
  tenantGradeLevelIds: [String!]
}

"""Input type for updating a fee bucket"""
input UpdateFeeBucketInput {
  """Description of the fee bucket"""
  description: String

  """Whether the fee bucket is active"""
  isActive: Boolean

  """The name of the fee bucket"""
  name: String
}

input UpdateFeeStructureInput {
  gradeLevelIds: [String!]
  isActive: Boolean
  name: String
}

"""Input for updating a fee structure item (partial)"""
input UpdateFeeStructureItemInput {
  amount: Float
  feeBucketId: ID
  isMandatory: Boolean
}

input UpdateHostelAssignmentInput {
  bedNumber: String
  id: String!
  roomNumber: String
  status: String
  vacatedAt: DateTime
}

input UpdateHostelInput {
  capacity: Int
  feeAmount: Float
  id: ID!
  name: String
}

"""Input type for updating an invoice"""
input UpdateInvoiceInput {
  """Additional notes or description"""
  description: String

  """The due date for payment"""
  dueDate: String

  """Whether the invoice is active"""
  isActive: Boolean

  """The total amount of the invoice"""
  totalAmount: Float
}

"""Input type for updating a payment"""
input UpdatePaymentInput {
  """The amount paid"""
  amount: Float

  """Whether the payment is active"""
  isActive: Boolean

  """Additional notes about the payment"""
  notes: String

  """The date when the payment was made"""
  paymentDate: String

  """The method used for payment"""
  paymentMethod: PaymentMethod

  """The status of the payment"""
  status: PaymentStatus

  """Transaction ID from payment provider"""
  transactionId: String
}

input UpdateScholarshipInput {
  amount: Float
  description: String
  id: ID!
  name: String
  type: String
}

input UpdateStaffInput {
  address: String
  bankAccount: String
  bankName: String
  dateOfBirth: String
  dateOfJoining: String
  department: String
  emergencyContact: String
  emergencyContactPhone: String
  employeeId: String
  firstName: String
  fullName: String
  gender: String!
  id: ID!
  jobDescription: String
  lastName: String
  nationalId: String
  phoneNumber: String
  qualifications: String
  role: String!
  salary: Float
  status: StaffStatus
  supervisor: String
  workExperience: String
}

input UpdateStreamInput {
  capacity: Float
  description: String
  gradeLevelId: ID
  id: ID!
  isActive: Boolean
  name: String
}

input UpdateStudentScholarshipInput {
  academicYear: String
  id: String!
  status: String
}

input UpdateTenantStreamInput {
  isActive: Boolean
}

input UpdateTenantSubjectInput {
  category: String
  code: String
  creditHours: Float
  department: String
  isActive: Boolean
  isCompulsory: Boolean
  name: String
  passingMarks: Float
  shortName: String
  subjectType: String
  totalMarks: Float
}

"""Input for updating a term"""
input UpdateTermInput {
  endDate: String
  isActive: Boolean
  isCurrent: Boolean
  name: String
  startDate: String
}

input UpdateTestInput {
  date: DateTime
  duration: Int
  endTime: String
  id: ID!
  instructions: String
  questions: [CreateQuestionInput!]
  referenceMaterials: [CreateReferenceMaterialInput!]
  resourceUrl: String
  startTime: String
  tenantGradeLevelIds: [ID!]
  tenantSubjectId: ID
  title: String
  totalMarks: Int
}

input UpdateTransportAssignmentInput {
  """Transport assignment ID to update"""
  assignmentId: ID!

  """New transport route ID (optional - for changing routes)"""
  newRouteId: ID

  """Updated pickup point (optional)"""
  pickupPoint: String
}

input UpdateTransportRouteInput {
  billingCycleLabel: String
  fee: Float
  id: ID!
  name: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  isGlobalAdmin: Boolean!
  memberships: [UserTenantMembership!]!
  name: String!
  password: String!
  schoolUrl: String!
  tests: [Test!]
  updatedAt: DateTime!
}

type UserInfo {
  email: String!
  id: ID!
  name: String!
}

type UserInvitation {
  createdAt: DateTime!
  email: String!
  expiresAt: DateTime!
  id: ID!
  invitedBy: User
  role: String!
  status: InvitationStatus!
  tenant: Tenant!
  token: String!
  updatedAt: DateTime!
}

type UserTenantMembership {
  createdAt: DateTime!
  id: ID!
  joinedAt: DateTime
  permissions: [String!]
  role: MembershipRole!
  status: MembershipStatus!
  tenant: Tenant!
  updatedAt: DateTime!
  user: User!
}